--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: acs; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA acs;


ALTER SCHEMA acs OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


SET search_path = public, pg_catalog;

--
-- Name: acs_auth(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_auth(text, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
token text;
BEGIN
token = '';
SELECT COUNT(*) INTO cnt FROM acs.users WHERE id=$1 AND pass=crypt($2, pass);
IF cnt > 0 THEN
	token = uuid_generate_v4();
	INSERT INTO acs.tokens(user_id, token, exp_date) VALUES ($1, token, now() + interval '1' day);
	DELETE FROM acs.tokens WHERE user_id=$1 AND exp_date < now();
ELSE
	RAISE notice 'wrong';
END IF;

RETURN token;
END;
$_$;


ALTER FUNCTION public.acs_auth(text, text) OWNER TO postgres;

--
-- Name: acs_check_user(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_check_user(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
BEGIN
SELECT COUNT(*) INTO cnt FROM acs.tokens WHERE user_id=$1 AND token=$2 AND exp_date >= now();
IF cnt > 0 THEN
	RETURN TRUE;
ELSE
	RETURN FALSE;
END IF;
END;
$_$;


ALTER FUNCTION public.acs_check_user(text, text) OWNER TO postgres;

--
-- Name: acs_get_user(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_get_user(text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
user_auth text;
BEGIN
user_auth = '';
SELECT user_id INTO user_auth FROM acs.tokens WHERE token=$1 AND exp_date >= now();

RETURN user_auth;
END;
$_$;


ALTER FUNCTION public.acs_get_user(text) OWNER TO postgres;

--
-- Name: acs_install(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_install() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
cnt int;
BEGIN

SELECT COUNT(*) INTO cnt FROM information_schema.schemata WHERE schema_name = 'acs';
IF cnt = 0 THEN
	CREATE SCHEMA acs;
END IF;

--users
CREATE TABLE IF NOT EXISTS acs.users (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	id text NOT NULL,
	pass text NOT NULL,
	position_user text,
	realname text
);
--groups
CREATE TABLE IF NOT EXISTS acs.groups (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	group_id text NOT NULL,
	realname text
);
--group-user
CREATE TABLE IF NOT EXISTS acs.group_user (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	group_id uuid NOT NULL,
	user_id text NOT NULL
);
--group-struct
CREATE TABLE IF NOT EXISTS acs.groups_struct (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	group_id uuid NOT NULL,
	parent_id uuid,
	level integer
);
--record_rule
CREATE TABLE IF NOT EXISTS acs.record_rule (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	record_id uuid NOT NULL,
	rule_id uuid NOT NULL
);
--rules
CREATE TABLE IF NOT EXISTS acs.rules (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	rule_id uuid NOT NULL,
	rule_desc text
);
--rules-data
CREATE TABLE IF NOT EXISTS acs.rules_data (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	rule_id uuid NOT NULL,
	rule_user text,
	rule_action text,
	rule_group text
);
--tokens
CREATE TABLE IF NOT EXISTS acs.tokens (
	user_id text NOT NULL,
	token text NOT NULL,
	exp_date timestamp
);
--changes_history
CREATE TABLE acs.changes_history
(
  change_uuid uuid NOT NULL DEFAULT uuid_generate_v4(),
  change_date timestamp without time zone NOT NULL,
  change_type text,
  change_db text,
  hash text
);

END;
$$;


ALTER FUNCTION public.acs_install() OWNER TO postgres;

--
-- Name: acs_protect_table(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_protect_table(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
user_name text;
BEGIN

--EXECUTE 'ALTER TABLE '|| $1 ||' ADD COLUMN uuid_record uuid';
--EXECUTE 'ALTER TABLE '|| $1 ||' ALTER COLUMN uuid_record SET default uuid_generate_v4()';
--EXECUTE 'UPDATE '|| $1 ||' SET uuid_record=uuid_generate_v4()';
EXECUTE 'ALTER TABLE '|| $1 ||' RENAME TO ' || $1 || '_protected';
EXECUTE 'CREATE OR REPLACE VIEW  '|| $1 ||' AS SELECT * FROM ' || $1 || '_protected';

FOR user_name IN
	SELECT usename FROM pg_user
   LOOP
	EXECUTE 'GRANT ALL PRIVILEGES ON ' || $1 || ' TO ' || user_name;
	EXECUTE 'REVOKE ALL PRIVILEGES ON ' || $1 || '_protected FROM ' || user_name;
   END LOOP;

END;
$_$;


ALTER FUNCTION public.acs_protect_table(text) OWNER TO postgres;

--
-- Name: acs_table(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_table() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
query_text text;
BEGIN

query_text = '(SELECT * FROM ttt)';

RETURN query_text;
END;
$$;


ALTER FUNCTION public.acs_table() OWNER TO postgres;

--
-- Name: acs_vcs_init(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_init() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
tname text;
BEGIN

FOR tname IN
	SELECT quote_ident(table_name)
	FROM   information_schema.tables
	WHERE  table_schema = 'public' AND table_type = 'BASE TABLE'
   LOOP
	EXECUTE 'ALTER TABLE '|| tname ||' ADD COLUMN uuid_record uuid';
	EXECUTE 'ALTER TABLE '|| tname ||' ALTER COLUMN uuid_record SET default uuid_generate_v4()';
	EXECUTE 'UPDATE '|| tname ||' SET uuid_record=uuid_generate_v4()';
   END LOOP;

INSERT INTO acs.changes_history(change_uuid, change_date, change_type, change_db) VALUES (uuid_generate_v4(), now(), 'init', current_database());

END;
$$;


ALTER FUNCTION public.acs_vcs_init() OWNER TO postgres;

--
-- Name: trigger_test(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION trigger_test() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

RAISE notice 'trigger work';
RAISE notice 'trigger op %', TG_OP;
RAISE notice 'trigger oid %', TG_RELID;
RAISE notice 'trigger current_query %', current_query();
RAISE notice 'trigger txid_current %', txid_current();
--RAISE notice 'trigger old %', OLD;
RAISE notice 'trigger new %', NEW;

RETURN NEW;
END;
$$;


ALTER FUNCTION public.trigger_test() OWNER TO postgres;

SET search_path = acs, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: changes_history; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE changes_history (
    change_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    change_date timestamp without time zone NOT NULL,
    change_type text,
    change_db text,
    hash text
);


ALTER TABLE acs.changes_history OWNER TO postgres;

--
-- Name: group_user; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE group_user (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    group_id uuid NOT NULL,
    user_id text NOT NULL
);


ALTER TABLE acs.group_user OWNER TO postgres;

--
-- Name: groups; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE groups (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    group_id text NOT NULL,
    realname text
);


ALTER TABLE acs.groups OWNER TO postgres;

--
-- Name: groups_struct; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE groups_struct (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    group_id uuid NOT NULL,
    parent_id uuid,
    level integer
);


ALTER TABLE acs.groups_struct OWNER TO postgres;

--
-- Name: record_rule; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE record_rule (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    record_id uuid NOT NULL,
    rule_id uuid NOT NULL
);


ALTER TABLE acs.record_rule OWNER TO postgres;

--
-- Name: rules; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rules (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    rule_id uuid NOT NULL,
    rule_desc text
);


ALTER TABLE acs.rules OWNER TO postgres;

--
-- Name: rules_data; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rules_data (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    rule_id uuid NOT NULL,
    rule_user text,
    rule_action text,
    rule_group text
);


ALTER TABLE acs.rules_data OWNER TO postgres;

--
-- Name: tokens; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE tokens (
    user_id text NOT NULL,
    token text NOT NULL,
    exp_date timestamp without time zone
);


ALTER TABLE acs.tokens OWNER TO postgres;

--
-- Name: users; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE users (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id text NOT NULL,
    pass text NOT NULL,
    position_user text,
    realname text
);


ALTER TABLE acs.users OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: fruits; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE fruits (
    name name,
    cnt integer,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE public.fruits OWNER TO postgres;

--
-- Name: test_protected; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE test_protected (
    id text,
    name_p text,
    property text,
    price double precision,
    rule uuid,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE public.test_protected OWNER TO postgres;

--
-- Name: test; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW test AS
 SELECT test_protected.id,
    test_protected.name_p,
    test_protected.property,
    test_protected.price,
    test_protected.rule
   FROM test_protected;


ALTER TABLE public.test OWNER TO postgres;

--
-- Name: ttt; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ttt (
    val integer,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE public.ttt OWNER TO postgres;

SET search_path = acs, pg_catalog;

--
-- Data for Name: changes_history; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY changes_history (change_uuid, change_date, change_type, change_db, hash) FROM stdin;
\.


--
-- Data for Name: group_user; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY group_user (uuid_record, group_id, user_id) FROM stdin;
37e5220c-27bd-456e-8f25-f7c562e0bc75	fa609aec-70e0-446f-5c2f-f4c209e2eb53	user1
\.


--
-- Data for Name: groups; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY groups (uuid_record, group_id, realname) FROM stdin;
e1ebf749-55c1-4087-a95f-1e29eb3e19f1	fa609aec-70e0-446f-5c2f-f4c209e2eb53	Группа1
\.


--
-- Data for Name: groups_struct; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY groups_struct (uuid_record, group_id, parent_id, level) FROM stdin;
\.


--
-- Data for Name: record_rule; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY record_rule (uuid_record, record_id, rule_id) FROM stdin;
2c5e6def-c98a-4d45-829e-4bb59504a1c5	443f66af-3ac5-4c18-9794-717d9d7d41c8	abfe8a4d-48f7-455d-7fd2-121401b8d4db
\.


--
-- Data for Name: rules; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rules (uuid_record, rule_id, rule_desc) FROM stdin;
48b81c4e-9cd2-44ea-9e83-c828fd7e1f84	abfe8a4d-48f7-455d-7fd2-121401b8d4db	Тест1
\.


--
-- Data for Name: rules_data; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rules_data (uuid_record, rule_id, rule_user, rule_action, rule_group) FROM stdin;
417b45e1-ffd8-4f1e-a260-996dadb7dbaa	abfe8a4d-48f7-455d-7fd2-121401b8d4db	admin	select	\N
\.


--
-- Data for Name: tokens; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY tokens (user_id, token, exp_date) FROM stdin;
admin	6fd97a9c-ddd8-4007-bceb-713cb0946bf8	2016-03-18 15:30:57.198354
user1	af28b51d-657c-4849-a7d9-747e96af6747	2016-03-18 15:31:54.253701
admin	a7e5b857-6e1c-4ad4-814b-efa6b6f39138	2016-03-18 15:48:45.145727
user1	45dd38c9-f780-4435-94a4-bb76a1f45284	2016-03-18 15:49:54.95072
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY users (uuid_record, id, pass, position_user, realname) FROM stdin;
c6fb440b-3674-40a3-844d-2d0bbeae8395	admin	$2a$06$UlIPX8PiH4CRGVnFOq1VLOy5WeGYXQDu/Og1vmBVsF2y4L1p79zJ2		Администратор
83d9f0da-89d2-411c-a4e5-aaa96b679d52	user1	$2a$06$dFrhh9o2GZgUOh5hxGTEKuCyn52Halx0pz4B6Kg1fuPhW.Q3YkN7a	Студент	Дмитрий
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: fruits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fruits (name, cnt, uuid_record) FROM stdin;
23231	3	c911c5a5-1438-4ea8-b661-85e6f9708b63
23231	3	2b5525dc-6ba9-4355-9501-32cdf7cfcabb
23231	3	0487c096-00e2-42a5-be54-75d95a125e29
23231	3	f5d97b67-dffc-40fc-b3bd-d7435879fed0
\.


--
-- Data for Name: test_protected; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY test_protected (id, name_p, property, price, rule, uuid_record) FROM stdin;
1	name1	s	120	\N	082914bc-d564-4861-8540-9c3f7d585327
5	name5	v	124	\N	2356add5-2fe5-4f4b-a331-3c49eb0bd8ba
2	name2	s	150	\N	192c88ad-d26a-462c-87a8-3f2505ade9a1
4	name4	z	120	\N	fd9400f4-4129-42ac-b8d5-884f218617d6
3	name3	q	150	937dd1f3-70ea-479e-7b87-4afd1b380f06	a49a0ca6-1de7-45e5-b576-7d6b0698ac68
\.


--
-- Data for Name: ttt; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ttt (val, uuid_record) FROM stdin;
100	443f66af-3ac5-4c18-9794-717d9d7d41c8
10	1c165c2a-f080-4077-b40f-72cbe2bb9418
1	7c07c543-7ea7-4bd3-9b62-7bd8108842d5
\.


--
-- Name: trigger_test; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_test AFTER INSERT OR DELETE OR UPDATE ON fruits FOR EACH ROW EXECUTE PROCEDURE trigger_test();


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: test_protected; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE test_protected FROM PUBLIC;
REVOKE ALL ON TABLE test_protected FROM postgres;


--
-- Name: test; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE test FROM PUBLIC;
REVOKE ALL ON TABLE test FROM postgres;
GRANT ALL ON TABLE test TO postgres;
GRANT ALL ON TABLE test TO admin;
GRANT ALL ON TABLE test TO dima;


--
-- PostgreSQL database dump complete
--

