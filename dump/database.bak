--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: acs; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA acs;


ALTER SCHEMA acs OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


SET search_path = public, pg_catalog;

--
-- Name: acs_auth(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_auth(text, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
token text;
BEGIN
token = '';
SELECT COUNT(*) INTO cnt FROM acs.users WHERE id=$1 AND pass=crypt($2, pass);
IF cnt > 0 THEN
	token = uuid_generate_v4();
	INSERT INTO acs.tokens(user_id, token, exp_date) VALUES ($1, token, now() + interval '1' day);
	DELETE FROM acs.tokens WHERE user_id=$1 AND exp_date < now();
ELSE
	RAISE notice 'wrong';
END IF;

RETURN token;
END;
$_$;


ALTER FUNCTION public.acs_auth(text, text) OWNER TO postgres;

--
-- Name: acs_check_user(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_check_user(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
BEGIN
SELECT COUNT(*) INTO cnt FROM acs.tokens WHERE user_id=$1 AND token=$2 AND exp_date >= now();
IF cnt > 0 THEN
	RETURN TRUE;
ELSE
	RETURN FALSE;
END IF;
END;
$_$;


ALTER FUNCTION public.acs_check_user(text, text) OWNER TO postgres;

--
-- Name: acs_get_user(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_get_user(text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
user_auth text;
BEGIN
user_auth = '';
SELECT user_id INTO user_auth FROM acs.tokens WHERE token=$1 AND exp_date >= now();

RETURN user_auth;
END;
$_$;


ALTER FUNCTION public.acs_get_user(text) OWNER TO postgres;

--
-- Name: acs_install(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_install() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
cnt int;
BEGIN

SELECT COUNT(*) INTO cnt FROM information_schema.schemata WHERE schema_name = 'acs';
IF cnt = 0 THEN
	CREATE SCHEMA acs;
END IF;

--users
CREATE TABLE IF NOT EXISTS acs.users (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	id text NOT NULL,
	pass text NOT NULL,
	position_user text,
	realname text
);
--groups
CREATE TABLE IF NOT EXISTS acs.groups (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	group_id text NOT NULL,
	realname text
);
--group-user
CREATE TABLE IF NOT EXISTS acs.group_user (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	group_id uuid NOT NULL,
	user_id text NOT NULL
);
--group-struct
CREATE TABLE IF NOT EXISTS acs.groups_struct (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	group_id uuid NOT NULL,
	parent_id uuid,
	level integer
);
--record_rule
CREATE TABLE IF NOT EXISTS acs.rule_record (
	uuid_record uuid NOT NULL,
	security_rule uuid NOT NULL
);
--rules
CREATE TABLE IF NOT EXISTS acs.rules (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	security_rule uuid NOT NULL,
	rule_desc text
);
--rules-data
CREATE TABLE IF NOT EXISTS acs.rules_data (
	uuid_record uuid NOT NULL DEFAULT uuid_generate_v4(),
	security_rule uuid NOT NULL,
	rule_user text,
	rule_action text,
	rule_group text
);
--tokens
CREATE TABLE IF NOT EXISTS acs.tokens (
	user_id text NOT NULL,
	token text NOT NULL,
	exp_date timestamp
);
--changes_history
CREATE TABLE IF NOT EXISTS acs.changes_history
(
  change_uuid uuid NOT NULL DEFAULT uuid_generate_v4(),
  change_date timestamp without time zone NOT NULL,
  change_type text,
  change_db text,
  hash text
);
--changes_fields
CREATE TABLE IF NOT EXISTS acs.changes_fields
(
  db_name text NOT NULL,
  record_uuid uuid NOT NULL,
  change_uuid uuid NOT NULL,
  table_name text NOT NULL
);
--record_changes
CREATE TABLE IF NOT EXISTS acs.record_changes
(
  record_uuid uuid NOT NULL,
  time_modified timestamp without time zone NOT NULL,
  table_name text NOT NULL
);
--list tables
CREATE TABLE IF NOT EXISTS acs.vcs_tables
(
  table_name text NOT NULL,
  schema_name text NOT NULL
);

END;
$$;


ALTER FUNCTION public.acs_install() OWNER TO postgres;

--
-- Name: acs_protect_table(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_protect_table(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
user_name text;
BEGIN

--EXECUTE 'ALTER TABLE '|| $1 ||' ADD COLUMN uuid_record uuid';
--EXECUTE 'ALTER TABLE '|| $1 ||' ALTER COLUMN uuid_record SET default uuid_generate_v4()';
--EXECUTE 'UPDATE '|| $1 ||' SET uuid_record=uuid_generate_v4()';
EXECUTE 'ALTER TABLE '|| $1 ||' RENAME TO ' || $1 || '_protected';
EXECUTE 'CREATE OR REPLACE VIEW  '|| $1 ||' AS SELECT * FROM ' || $1 || '_protected';

FOR user_name IN
	SELECT usename FROM pg_user
   LOOP
	EXECUTE 'GRANT ALL PRIVILEGES ON ' || $1 || ' TO ' || user_name;
	EXECUTE 'REVOKE ALL PRIVILEGES ON ' || $1 || '_protected FROM ' || user_name;
   END LOOP;

END;
$_$;


ALTER FUNCTION public.acs_protect_table(text) OWNER TO postgres;

--
-- Name: acs_rec_protect(uuid, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_rec_protect(uuid, uuid, text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
BEGIN
--check rule
SELECT COUNT(*) INTO cnt FROM acs.rules WHERE security_rule=$1;
IF cnt = 0 THEN
	RETURN;
END IF;
--check record
EXECUTE 'SELECT COUNT(*) FROM '|| $3 ||' WHERE uuid_record='|| quote_literal($2) INTO cnt;
IF cnt = 0 THEN
	RETURN;
END IF;

INSERT INTO acs.rule_record(uuid_record, security_rule) VALUES ($2, $1);

END;
$_$;


ALTER FUNCTION public.acs_rec_protect(uuid, uuid, text) OWNER TO postgres;

--
-- Name: acs_table(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_table() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
query_text text;
BEGIN

query_text = '(SELECT * FROM ttt)';

RETURN query_text;
END;
$$;


ALTER FUNCTION public.acs_table() OWNER TO postgres;

--
-- Name: acs_tg_audit(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_tg_audit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

IF TG_OP = 'INSERT' THEN
	INSERT INTO acs.record_changes(record_uuid, time_modified, table_name) VALUES(NEW.uuid_record, now(), TG_RELNAME);
RETURN NULL;
ELSIF TG_OP = 'UPDATE' THEN
	UPDATE acs.record_changes SET time_modified=now() WHERE record_uuid=NEW.uuid_record;
RETURN NULL;
ELSIF TG_OP = 'DELETE' THEN
	DELETE FROM acs.record_changes WHERE record_uuid=OLD.uuid_record;
RETURN NULL;
END IF;

END;
$$;


ALTER FUNCTION public.acs_tg_audit() OWNER TO postgres;

--
-- Name: acs_tg_event(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_tg_event() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

IF tg_tag = 'CREATE TABLE' THEN
	RAISE notice 'command %', tg_tag;
END IF;

END;
$$;


ALTER FUNCTION public.acs_tg_event() OWNER TO postgres;

--
-- Name: acs_vcs_compile(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_compile() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
tname text;
ruuid text;
uuid_change uuid;
cdate timestamp;
r record;
data text;
hash text;
BEGIN

SELECT change_date INTO cdate FROM acs.changes_history ORDER BY change_date DESC LIMIT 1;
--RAISE notice 'date %', cdate;
IF cdate IS NULL THEN
	RETURN;
END IF;

data = '';
FOR tname IN SELECT table_name FROM acs.vcs_tables
   LOOP
	data = data || tname;
	FOR r IN EXECUTE 'SELECT '|| tname ||'.* FROM '|| tname ||' LEFT OUTER JOIN acs.record_changes ON ('|| tname ||'.uuid_record = acs.record_changes.record_uuid) WHERE acs.record_changes.time_modified >= '|| quote_literal(cdate)
	LOOP
		data = data || array_to_string(array_agg(r),',','*');
	END LOOP;
   END LOOP;

--RAISE notice 'data %', data;
hash = md5(data);
--RAISE notice 'hash %', hash;
uuid_change = uuid_generate_v4();

FOR tname IN SELECT table_name FROM acs.vcs_tables
   LOOP
	--RAISE notice 'table %', tname;
	FOR ruuid IN EXECUTE 'SELECT '|| tname ||'.uuid_record FROM '|| tname ||' LEFT OUTER JOIN acs.record_changes ON ('|| tname ||'.uuid_record = acs.record_changes.record_uuid) WHERE acs.record_changes.time_modified >= '|| quote_literal(cdate)
	LOOP
		--RAISE notice 'uuid record %', ruuid;
		EXECUTE 'INSERT INTO acs.changes_fields(db_name,record_uuid,change_uuid,table_name) VALUES(current_database(), '|| quote_literal(ruuid) ||', '|| quote_literal(uuid_change) ||', '|| quote_literal(tname) ||')';
	END LOOP;
   END LOOP;

INSERT INTO acs.changes_history(change_uuid, change_date, change_type, change_db, hash) VALUES (uuid_change, now(), 'compile', current_database(), hash);

END;
$$;


ALTER FUNCTION public.acs_vcs_compile() OWNER TO postgres;

--
-- Name: acs_vcs_init(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_init() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
tname text;
BEGIN

FOR tname IN
	SELECT quote_ident(table_name)
	FROM   information_schema.tables
	WHERE  table_schema = 'public' AND table_type = 'BASE TABLE'
   LOOP
	EXECUTE 'SELECT acs_vcs_table_add('|| quote_literal(tname) ||')';
   END LOOP;

INSERT INTO acs.changes_history(change_uuid, change_date, change_type, change_db) VALUES (uuid_generate_v4(), now(), 'init', current_database());

CREATE EVENT TRIGGER acs_tg_event ON ddl_command_end
   EXECUTE PROCEDURE acs_tg_event();

END;
$$;


ALTER FUNCTION public.acs_vcs_init() OWNER TO postgres;

--
-- Name: acs_vcs_table_add(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_table_add(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
ruuid text;
BEGIN

EXECUTE 'ALTER TABLE '|| $1 ||' ADD COLUMN uuid_record uuid';
EXECUTE 'ALTER TABLE '|| $1 ||' ALTER COLUMN uuid_record SET default uuid_generate_v4()';
EXECUTE 'UPDATE '|| $1 ||' SET uuid_record=uuid_generate_v4()';

FOR ruuid IN EXECUTE 'SELECT uuid_record FROM ' || $1
	LOOP
		EXECUTE 'INSERT INTO acs.record_changes(record_uuid, time_modified, table_name) VALUES('||quote_literal(ruuid)||', now(), '||quote_literal($1)||')';
	END LOOP;

EXECUTE 'CREATE TRIGGER t_acs_'|| $1 ||'
AFTER INSERT OR UPDATE OR DELETE ON '|| $1 ||' FOR EACH ROW
EXECUTE PROCEDURE acs_tg_audit()';

EXECUTE 'INSERT INTO acs.vcs_tables(table_name, schema_name) VALUES('|| quote_literal($1) ||', '|| quote_literal('public') ||')';

END;
$_$;


ALTER FUNCTION public.acs_vcs_table_add(text) OWNER TO postgres;

--
-- Name: acs_vcs_table_rm(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_table_rm(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
BEGIN

EXECUTE 'ALTER TABLE '|| $1 ||' DROP COLUMN IF EXISTS uuid_record';
EXECUTE 'DELETE FROM acs.record_changes WHERE table_name='|| quote_literal($1);
EXECUTE 'DELETE FROM acs.vcs_tables WHERE table_name='|| quote_literal($1);
EXECUTE 'DROP TRIGGER IF EXISTS t_acs_'|| $1 ||' ON ' || $1;

END;
$_$;


ALTER FUNCTION public.acs_vcs_table_rm(text) OWNER TO postgres;

SET search_path = acs, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: changes_fields; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE changes_fields (
    db_name text NOT NULL,
    record_uuid uuid NOT NULL,
    change_uuid uuid NOT NULL,
    table_name text NOT NULL
);


ALTER TABLE acs.changes_fields OWNER TO postgres;

--
-- Name: changes_history; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE changes_history (
    change_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    change_date timestamp without time zone NOT NULL,
    change_type text,
    change_db text,
    hash text
);


ALTER TABLE acs.changes_history OWNER TO postgres;

--
-- Name: group_user; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE group_user (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    group_id uuid NOT NULL,
    user_id text NOT NULL
);


ALTER TABLE acs.group_user OWNER TO postgres;

--
-- Name: groups; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE groups (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    group_id text NOT NULL,
    realname text
);


ALTER TABLE acs.groups OWNER TO postgres;

--
-- Name: groups_struct; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE groups_struct (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    group_id uuid NOT NULL,
    parent_id uuid,
    level integer
);


ALTER TABLE acs.groups_struct OWNER TO postgres;

--
-- Name: record_changes; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE record_changes (
    record_uuid uuid NOT NULL,
    time_modified timestamp without time zone NOT NULL,
    table_name text NOT NULL
);


ALTER TABLE acs.record_changes OWNER TO postgres;

--
-- Name: rule_record; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rule_record (
    uuid_record uuid NOT NULL,
    security_rule uuid NOT NULL
);


ALTER TABLE acs.rule_record OWNER TO postgres;

--
-- Name: rules; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rules (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    security_rule uuid NOT NULL,
    rule_desc text
);


ALTER TABLE acs.rules OWNER TO postgres;

--
-- Name: rules_data; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rules_data (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    security_rule uuid NOT NULL,
    rule_user text,
    rule_action text,
    rule_group text
);


ALTER TABLE acs.rules_data OWNER TO postgres;

--
-- Name: tokens; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE tokens (
    user_id text NOT NULL,
    token text NOT NULL,
    exp_date timestamp without time zone
);


ALTER TABLE acs.tokens OWNER TO postgres;

--
-- Name: users; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE users (
    uuid_record uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    id text NOT NULL,
    pass text NOT NULL,
    position_user text,
    realname text
);


ALTER TABLE acs.users OWNER TO postgres;

--
-- Name: vcs_tables; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE vcs_tables (
    table_name text NOT NULL,
    schema_name text NOT NULL
);


ALTER TABLE acs.vcs_tables OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: fruits; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE fruits (
    name name,
    cnt integer,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE public.fruits OWNER TO postgres;

--
-- Name: test_protected; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE test_protected (
    id text,
    name_p text,
    property text,
    price double precision,
    rule uuid,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE public.test_protected OWNER TO postgres;

--
-- Name: test; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW test AS
 SELECT test_protected.id,
    test_protected.name_p,
    test_protected.property,
    test_protected.price,
    test_protected.rule
   FROM test_protected;


ALTER TABLE public.test OWNER TO postgres;

--
-- Name: ttt; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ttt (
    val integer,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE public.ttt OWNER TO postgres;

SET search_path = acs, pg_catalog;

--
-- Data for Name: changes_fields; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY changes_fields (db_name, record_uuid, change_uuid, table_name) FROM stdin;
\.


--
-- Data for Name: changes_history; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY changes_history (change_uuid, change_date, change_type, change_db, hash) FROM stdin;
\.


--
-- Data for Name: group_user; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY group_user (uuid_record, group_id, user_id) FROM stdin;
205e3170-dafe-411e-b1a9-a1413f4e852a	a32357af-dba2-4d72-4ac3-79ea26196c96	admin
\.


--
-- Data for Name: groups; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY groups (uuid_record, group_id, realname) FROM stdin;
313fe475-19b9-491b-9632-282b190a80f5	a32357af-dba2-4d72-4ac3-79ea26196c96	Группа1
\.


--
-- Data for Name: groups_struct; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY groups_struct (uuid_record, group_id, parent_id, level) FROM stdin;
\.


--
-- Data for Name: record_changes; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY record_changes (record_uuid, time_modified, table_name) FROM stdin;
\.


--
-- Data for Name: rule_record; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rule_record (uuid_record, security_rule) FROM stdin;
ceeb232b-ec3b-4f2e-b8ca-85df84e4b745	c1900786-a548-4b74-55d4-ce79acd8fce1
105393f5-d2ae-470a-b105-952cf2a9c4d3	c1900786-a548-4b74-55d4-ce79acd8fce1
\.


--
-- Data for Name: rules; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rules (uuid_record, security_rule, rule_desc) FROM stdin;
6fdc6b29-5733-4773-8b76-a7205a40e3e9	c1900786-a548-4b74-55d4-ce79acd8fce1	Тест
\.


--
-- Data for Name: rules_data; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rules_data (uuid_record, security_rule, rule_user, rule_action, rule_group) FROM stdin;
c45e338d-88b9-44c7-82f8-3756ead3e2d9	c1900786-a548-4b74-55d4-ce79acd8fce1	admin	select	\N
\.


--
-- Data for Name: tokens; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY tokens (user_id, token, exp_date) FROM stdin;
admin	22a4bf68-427d-4fd4-9300-d13782194d95	2016-03-25 16:25:30.963938
admin	1dc7cb40-f0e0-453a-a0f4-4448e3026d52	2016-03-25 16:25:56.563638
admin	9f845f28-1708-4a35-9b20-4d1d377ad8de	2016-03-25 18:05:37.634663
admin	c95fc666-b01a-4eec-928b-719e7a213864	2016-03-25 18:07:44.347705
admin	df91683c-9f7d-404c-855f-943dfeb366d8	2016-03-25 18:08:05.384191
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY users (uuid_record, id, pass, position_user, realname) FROM stdin;
85bcc0a9-d474-4ff8-b4b5-4d376d2317ba	admin	$2a$06$QMnOhgv.upASLQ9TGU7NUupR2KRoW/qBZ2sFpkXz1UTKZ/rKNlZK2		Администратор
\.


--
-- Data for Name: vcs_tables; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY vcs_tables (table_name, schema_name) FROM stdin;
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: fruits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fruits (name, cnt, uuid_record) FROM stdin;
23231	3	4bf2e17e-af3b-4ada-b7a4-00720d39f3fa
23231	3	d613a196-7dcf-47fb-beb6-be2cd63f0343
23231	3	fc8896aa-6882-4164-a68f-9810f48d5822
23231	3	498e3284-ec42-4501-b286-4263a9ab56e7
\.


--
-- Data for Name: test_protected; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY test_protected (id, name_p, property, price, rule, uuid_record) FROM stdin;
1	name1	s	120	\N	000e1923-e39b-46d2-aaa0-46be532d2ab4
5	name5	v	124	\N	efde8bae-4850-4b81-8f44-eaa033855ca5
2	name2	s	150	\N	815d89f5-d5cb-4ac4-abec-9d41ad953e83
4	name4	z	120	\N	849c6c5c-2789-4fa4-9f21-8332135bd309
3	name3	q	150	937dd1f3-70ea-479e-7b87-4afd1b380f06	d314824c-1b31-4e99-93bc-6ba4f78d20bf
\.


--
-- Data for Name: ttt; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ttt (val, uuid_record) FROM stdin;
100	a9b28367-12f0-434d-a707-83d882cf6eea
1	105393f5-d2ae-470a-b105-952cf2a9c4d3
220	ceeb232b-ec3b-4f2e-b8ca-85df84e4b745
128	883201e4-2a2d-4dce-b2e0-b8c01ed500e7
135	54a4af65-c075-4ba4-9187-6fc273dd74a3
\.


--
-- Name: t_acs_fruits; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acs_fruits AFTER INSERT OR DELETE OR UPDATE ON fruits FOR EACH ROW EXECUTE PROCEDURE acs_tg_audit();


--
-- Name: t_acs_test_protected; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acs_test_protected AFTER INSERT OR DELETE OR UPDATE ON test_protected FOR EACH ROW EXECUTE PROCEDURE acs_tg_audit();


--
-- Name: t_acs_ttt; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acs_ttt AFTER INSERT OR DELETE OR UPDATE ON ttt FOR EACH ROW EXECUTE PROCEDURE acs_tg_audit();


--
-- Name: acs_tg_event; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER acs_tg_event ON ddl_command_end
   EXECUTE PROCEDURE public.acs_tg_event();


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: test_protected; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE test_protected FROM PUBLIC;
REVOKE ALL ON TABLE test_protected FROM postgres;


--
-- Name: test; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE test FROM PUBLIC;
REVOKE ALL ON TABLE test FROM postgres;
GRANT ALL ON TABLE test TO postgres;
GRANT ALL ON TABLE test TO admin;
GRANT ALL ON TABLE test TO dima;


--
-- PostgreSQL database dump complete
--

