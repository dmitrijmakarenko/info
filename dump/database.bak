--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: acs; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA acs;


ALTER SCHEMA acs OWNER TO postgres;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


SET search_path = public, pg_catalog;

--
-- Name: acs_auth(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_auth(text, text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
token text;
BEGIN
token = '';
SELECT COUNT(*) INTO cnt FROM acs.users WHERE id=$1 AND pass=crypt($2, pass);
IF cnt > 0 THEN
	token = uuid_generate_v4();
	INSERT INTO acs.tokens(user_id, token, exp_date) VALUES ($1, token, now() + interval '1' day);
	DELETE FROM acs.tokens WHERE user_id=$1 AND exp_date < now();
ELSE
	RAISE notice 'wrong';
END IF;

RETURN token;
END;
$_$;


ALTER FUNCTION public.acs_auth(text, text) OWNER TO postgres;

--
-- Name: acs_check_user(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_check_user(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
BEGIN
SELECT COUNT(*) INTO cnt FROM acs.tokens WHERE user_id=$1 AND token=$2 AND exp_date >= now();
IF cnt > 0 THEN
	RETURN TRUE;
ELSE
	RETURN FALSE;
END IF;
END;
$_$;


ALTER FUNCTION public.acs_check_user(text, text) OWNER TO postgres;

--
-- Name: acs_copy_from_file(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_copy_from_file() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
json_data json;
item json;
column_name text;
column_type text;
table_name text;
structure text;
cuuid uuid;
BEGIN
--temp table
DROP TABLE IF EXISTS acs.transfer_data_t;
CREATE TABLE acs.transfer_data_t (
  tname text NOT NULL primary key,
  ttype text,
  data json
);

COPY acs.transfer_data_t FROM '/tmp/transfer.data';

FOR table_name,json_data IN SELECT tname,data FROM acs.transfer_data_t WHERE ttype='data'
   LOOP
	--stucture table
	structure = '';
	FOR column_name, column_type IN EXECUTE 'SELECT c.column_name, c.data_type 
	FROM information_schema.tables t JOIN information_schema.columns c ON t.table_name = c.table_name 
	WHERE t.table_schema = '|| quote_literal('public') ||' AND t.table_catalog = current_database() AND t.table_name = ' || quote_literal(table_name)
	LOOP
		structure = structure || column_name || ' ' || column_type || ',';
	END LOOP;
	structure = substr(structure, 0, char_length(structure));
	RAISE notice 'structure %', structure;
	--insert values
	FOR item IN SELECT * FROM json_array_elements(json_data)
	LOOP
		EXECUTE 'INSERT INTO '|| table_name ||' SELECT * FROM json_to_record('|| quote_literal(item) ||') as x(' || structure || ')';
	END LOOP;
   END LOOP;

--import changed fields
SELECT data INTO json_data FROM acs.transfer_data_t WHERE tname='acs.changes_fields';
FOR item IN SELECT * FROM json_array_elements(json_data)
LOOP
	INSERT INTO acs.changes_fields SELECT * FROM json_to_record(item) AS x(db_name text,record_uuid uuid,change_uuid uuid,table_name text);
END LOOP;
--import history
SELECT data INTO json_data FROM acs.transfer_data_t WHERE tname='acs.changes_history';
FOR item IN SELECT * FROM json_array_elements(json_data)
LOOP
	INSERT INTO acs.changes_history SELECT * FROM json_to_record(item) AS x(change_uuid uuid,change_parent uuid,change_date timestamp,change_type text,change_db text,hash text);
	SELECT change.change_uuid INTO cuuid FROM (SELECT * FROM json_to_record(item) AS x(change_uuid uuid,change_parent uuid,change_date timestamp,change_type text,change_db text,hash text)) AS change;
	INSERT INTO acs.changes_history(change_parent,change_date,change_type,change_db) VALUES(cuuid,now(),'commit',current_database());
END LOOP;

DROP TABLE IF EXISTS acs.transfer_data_t;

END;
$$;


ALTER FUNCTION public.acs_copy_from_file() OWNER TO postgres;

--
-- Name: acs_copy_to_file(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_copy_to_file() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
cdate timestamp;
json_data json;
cparent uuid;
cuuid uuid;
tname text;
BEGIN
--get change compile
SELECT change_uuid,change_parent INTO cuuid,cparent FROM acs.changes_history WHERE change_type='compile' AND change_parent IS NOT NULL ORDER BY change_date DESC LIMIT 1;
IF cuuid IS NULL THEN
	RETURN;
END IF;
--get date
SELECT change_date INTO cdate FROM acs.changes_history WHERE change_uuid=cparent;
IF cdate IS NULL THEN
	RETURN;
END IF;
--temp table
DROP TABLE IF EXISTS acs.transfer_data;
CREATE TABLE acs.transfer_data (
  tname text NOT NULL primary key,
  ttype text,
  data json
);

FOR tname IN SELECT table_name FROM acs.tables
   LOOP
	EXECUTE 'SELECT json_agg(t) FROM (SELECT '|| tname ||'.* FROM '|| tname ||' LEFT OUTER JOIN acs.record_changes ON ('|| tname ||'.uuid_record = acs.record_changes.record_uuid) WHERE acs.record_changes.time_modified >= '|| quote_literal(cdate) ||') t' INTO json_data;
	INSERT INTO acs.transfer_data(tname, ttype, data) VALUES(tname, 'data', json_data);
   END LOOP;

SELECT json_agg(t) INTO json_data FROM (SELECT * FROM acs.changes_history WHERE change_uuid=cuuid) t;
INSERT INTO acs.transfer_data(tname, ttype, data) VALUES('acs.changes_history', 'acs', json_data);
SELECT json_agg(t) INTO json_data FROM (SELECT * FROM acs.changes_fields WHERE change_uuid=cuuid) t;
INSERT INTO acs.transfer_data(tname, ttype, data) VALUES('acs.changes_fields', 'acs', json_data);

COPY acs.transfer_data TO '/tmp/transfer.data';

DROP TABLE IF EXISTS acs.transfer_data;

END;
$$;


ALTER FUNCTION public.acs_copy_to_file() OWNER TO postgres;

--
-- Name: acs_get_user(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_get_user(text) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
user_auth text;
BEGIN
user_auth = '';
SELECT user_id INTO user_auth FROM acs.tokens WHERE token=$1 AND exp_date >= now();

RETURN user_auth;
END;
$_$;


ALTER FUNCTION public.acs_get_user(text) OWNER TO postgres;

--
-- Name: acs_insert_record(uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_insert_record(uuid, text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
tmp_rec bool;
rule_uuid uuid;
BEGIN

rule_uuid = uuid_generate_v4();

tmp_rec = true;

INSERT INTO acs.rule_record(uuid_record, security_rule) VALUES ($1, rule_uuid);

IF tmp_rec THEN
	INSERT INTO acs.rules_data(security_rule, rule_user, rule_action, temp_label, temp_time) 
	VALUES (rule_uuid, $2, 'r', 't', now()+interval '1' day);
ELSE
	INSERT INTO acs.rules_data(security_rule, rule_user, rule_action) 
	VALUES (rule_uuid, $2, 'r');
END IF;

END;
$_$;


ALTER FUNCTION public.acs_insert_record(uuid, text) OWNER TO postgres;

--
-- Name: acs_install(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_install() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
cnt int;
BEGIN

SELECT COUNT(*) INTO cnt FROM information_schema.schemata WHERE schema_name = 'acs';
IF cnt = 0 THEN
	CREATE SCHEMA acs;
END IF;

--users
CREATE TABLE IF NOT EXISTS acs.users
(
	id text NOT NULL,
	pass text NOT NULL,
	position_user text,
	realname text
);
--groups
CREATE TABLE IF NOT EXISTS acs.groups
(
	group_id text NOT NULL,
	realname text
);
--group-user
CREATE TABLE IF NOT EXISTS acs.group_user
(
	group_id uuid NOT NULL,
	user_id text NOT NULL
);
--group-struct
CREATE TABLE IF NOT EXISTS acs.groups_struct
(
	group_id uuid NOT NULL,
	parent_id uuid,
	level integer
);
--record_rule
CREATE TABLE IF NOT EXISTS acs.rule_record
(
	uuid_record uuid NOT NULL,
	security_rule uuid NOT NULL
);
--rules
CREATE TABLE IF NOT EXISTS acs.rules
(
	security_rule uuid NOT NULL,
	rule_desc text
);
--rules-data
CREATE TABLE IF NOT EXISTS acs.rules_data
(
	security_rule uuid NOT NULL,
	rule_user text,
	rule_action text,
	rule_group text,
	temp_label text,
	temp_time timestamp
);
--tokens
CREATE TABLE IF NOT EXISTS acs.tokens
(
	user_id text NOT NULL,
	token text NOT NULL,
	exp_date timestamp
);
--changes_history
CREATE TABLE IF NOT EXISTS acs.changes_history
(
	change_uuid uuid NOT NULL DEFAULT uuid_generate_v4(),
	change_parent uuid,
	change_date timestamp without time zone NOT NULL,
	change_type text,
	change_db text,
	hash text
);
--changes_fields
CREATE TABLE IF NOT EXISTS acs.changes_fields
(
	db_name text NOT NULL,
	record_uuid uuid NOT NULL,
	change_uuid uuid NOT NULL,
	table_name text NOT NULL
);
--record_changes
CREATE TABLE IF NOT EXISTS acs.record_changes
(
	record_uuid uuid NOT NULL,
	time_modified timestamp without time zone NOT NULL,
	table_name text NOT NULL
);
--list tables
CREATE TABLE IF NOT EXISTS acs.tables
(
	table_name text NOT NULL,
	schema_name text NOT NULL
);

END;
$$;


ALTER FUNCTION public.acs_install() OWNER TO postgres;

--
-- Name: acs_protect_table(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_protect_table(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
user_name text;
BEGIN

--EXECUTE 'ALTER TABLE '|| $1 ||' ADD COLUMN uuid_record uuid';
--EXECUTE 'ALTER TABLE '|| $1 ||' ALTER COLUMN uuid_record SET default uuid_generate_v4()';
--EXECUTE 'UPDATE '|| $1 ||' SET uuid_record=uuid_generate_v4()';
EXECUTE 'ALTER TABLE '|| $1 ||' RENAME TO ' || $1 || '_protected';
EXECUTE 'CREATE OR REPLACE VIEW  '|| $1 ||' AS SELECT * FROM ' || $1 || '_protected';

FOR user_name IN
	SELECT usename FROM pg_user
   LOOP
	EXECUTE 'GRANT ALL PRIVILEGES ON ' || $1 || ' TO ' || user_name;
	EXECUTE 'REVOKE ALL PRIVILEGES ON ' || $1 || '_protected FROM ' || user_name;
   END LOOP;

END;
$_$;


ALTER FUNCTION public.acs_protect_table(text) OWNER TO postgres;

--
-- Name: acs_rec_protect(uuid, uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_rec_protect(uuid, uuid, text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
cnt int;
BEGIN
--check rule
SELECT COUNT(*) INTO cnt FROM acs.rules WHERE security_rule=$1;
IF cnt = 0 THEN
	RETURN;
END IF;
--check record
EXECUTE 'SELECT COUNT(*) FROM '|| $3 ||' WHERE uuid_record='|| quote_literal($2) INTO cnt;
IF cnt = 0 THEN
	RETURN;
END IF;

SELECT COUNT(*) INTO cnt FROM acs.rule_record WHERE uuid_record=$2;
IF cnt = 0 THEN
	INSERT INTO acs.rule_record(uuid_record, security_rule) VALUES ($2, $1);
ELSE
	UPDATE acs.rule_record SET security_rule=$1 WHERE uuid_record=$2;
END IF;

END;
$_$;


ALTER FUNCTION public.acs_rec_protect(uuid, uuid, text) OWNER TO postgres;

--
-- Name: acs_table(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_table() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
query_text text;
BEGIN

query_text = '(SELECT * FROM ttt)';

RETURN query_text;
END;
$$;


ALTER FUNCTION public.acs_table() OWNER TO postgres;

--
-- Name: acs_tg_audit(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_tg_audit() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
BEGIN

IF TG_OP = 'INSERT' THEN
	INSERT INTO acs.record_changes(record_uuid, time_modified, table_name) VALUES(NEW.uuid_record, now(), TG_RELNAME);
RETURN NULL;
ELSIF TG_OP = 'UPDATE' THEN
	UPDATE acs.record_changes SET time_modified=now() WHERE record_uuid=NEW.uuid_record;
RETURN NULL;
ELSIF TG_OP = 'DELETE' THEN
	DELETE FROM acs.record_changes WHERE record_uuid=OLD.uuid_record;
RETURN NULL;
END IF;

END;
$$;


ALTER FUNCTION public.acs_tg_audit() OWNER TO postgres;

--
-- Name: acs_tg_event(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_tg_event() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE

BEGIN

IF tg_tag = 'CREATE TABLE' THEN
	RAISE notice 'command %', tg_tag;
END IF;

END;
$$;


ALTER FUNCTION public.acs_tg_event() OWNER TO postgres;

--
-- Name: acs_vcs_compile(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_compile() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
tname text;
ruuid text;
uuid_change uuid;
cdate timestamp;
cuuid uuid;
r record;
data text;
hash text;
BEGIN

SELECT change_date,change_uuid INTO cdate,cuuid FROM acs.changes_history ORDER BY change_date DESC LIMIT 1;
IF cdate IS NULL THEN
	RETURN;
END IF;

data = '';
FOR tname IN SELECT table_name FROM acs.vcs_tables
   LOOP
	data = data || tname;
	FOR r IN EXECUTE 'SELECT '|| tname ||'.* FROM '|| tname ||' LEFT OUTER JOIN acs.record_changes ON ('|| tname ||'.uuid_record = acs.record_changes.record_uuid) WHERE acs.record_changes.time_modified >= '|| quote_literal(cdate)
	LOOP
		data = data || array_to_string(array_agg(r),',','*');
	END LOOP;
   END LOOP;

hash = md5(data);
uuid_change = uuid_generate_v4();

FOR tname IN SELECT table_name FROM acs.vcs_tables
   LOOP
	FOR ruuid IN EXECUTE 'SELECT '|| tname ||'.uuid_record FROM '|| tname ||' LEFT OUTER JOIN acs.record_changes ON ('|| tname ||'.uuid_record = acs.record_changes.record_uuid) WHERE acs.record_changes.time_modified >= '|| quote_literal(cdate)
	LOOP
		--RAISE notice 'uuid record %', ruuid;
		EXECUTE 'INSERT INTO acs.changes_fields(db_name,record_uuid,change_uuid,table_name) VALUES(current_database(), '|| quote_literal(ruuid) ||', '|| quote_literal(uuid_change) ||', '|| quote_literal(tname) ||')';
	END LOOP;
   END LOOP;

INSERT INTO acs.changes_history(change_uuid,change_parent,change_date,change_type,change_db,hash) VALUES (uuid_change,cuuid,now(),'compile',current_database(),hash);

END;
$$;


ALTER FUNCTION public.acs_vcs_compile() OWNER TO postgres;

--
-- Name: acs_vcs_init(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_init() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
tname text;
BEGIN

FOR tname IN
	SELECT quote_ident(table_name)
	FROM   information_schema.tables
	WHERE  table_schema = 'public' AND table_type = 'BASE TABLE'
   LOOP
	EXECUTE 'SELECT acs_vcs_table_add('|| quote_literal(tname) ||')';
   END LOOP;

INSERT INTO acs.changes_history(change_uuid, change_date, change_type, change_db) VALUES (uuid_generate_v4(), now(), 'init', current_database());

DROP EVENT TRIGGER acs_tg_event;
CREATE EVENT TRIGGER acs_tg_event ON ddl_command_end
   EXECUTE PROCEDURE acs_tg_event();

END;
$$;


ALTER FUNCTION public.acs_vcs_init() OWNER TO postgres;

--
-- Name: acs_vcs_table_add(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_table_add(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
ruuid text;
cnt int;
BEGIN

EXECUTE 'ALTER TABLE '|| $1 ||' ADD COLUMN uuid_record uuid';
EXECUTE 'ALTER TABLE '|| $1 ||' ALTER COLUMN uuid_record SET default uuid_generate_v4()';
EXECUTE 'UPDATE '|| $1 ||' SET uuid_record=uuid_generate_v4()';

FOR ruuid IN EXECUTE 'SELECT uuid_record FROM ' || $1
	LOOP
		EXECUTE 'INSERT INTO acs.record_changes(record_uuid, time_modified, table_name) VALUES('||quote_literal(ruuid)||', now(), '||quote_literal($1)||')';
	END LOOP;

EXECUTE 'CREATE TRIGGER t_acs_'|| $1 ||'
AFTER INSERT OR UPDATE OR DELETE ON '|| $1 ||' FOR EACH ROW
EXECUTE PROCEDURE acs_tg_audit()';

EXECUTE 'SELECT COUNT(*) FROM acs.tables WHERE table_name='|| quote_literal($1) INTO cnt;
IF cnt = 0 THEN
	EXECUTE 'INSERT INTO acs.tables(table_name, schema_name) VALUES('|| quote_literal($1) ||', '|| quote_literal('public') ||')';
END IF;

END;
$_$;


ALTER FUNCTION public.acs_vcs_table_add(text) OWNER TO postgres;

--
-- Name: acs_vcs_table_rm(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION acs_vcs_table_rm(text) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
BEGIN
--EXECUTE 'ALTER TABLE '|| $1 ||' DROP COLUMN IF EXISTS uuid_record';
--EXECUTE 'DELETE FROM acs.record_changes WHERE table_name='|| quote_literal($1);
EXECUTE 'DELETE FROM acs.tables WHERE table_name='|| quote_literal($1);
--EXECUTE 'DROP TRIGGER IF EXISTS t_acs_'|| $1 ||' ON ' || $1;
END;
$_$;


ALTER FUNCTION public.acs_vcs_table_rm(text) OWNER TO postgres;

SET search_path = acs, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: changes_fields; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE changes_fields (
    db_name text NOT NULL,
    record_uuid uuid NOT NULL,
    change_uuid uuid NOT NULL,
    table_name text NOT NULL
);


ALTER TABLE changes_fields OWNER TO postgres;

--
-- Name: changes_history; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE changes_history (
    change_uuid uuid DEFAULT public.uuid_generate_v4() NOT NULL,
    change_parent uuid,
    change_date timestamp without time zone NOT NULL,
    change_type text,
    change_db text,
    hash text
);


ALTER TABLE changes_history OWNER TO postgres;

--
-- Name: group_user; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE group_user (
    group_id uuid NOT NULL,
    user_id text NOT NULL
);


ALTER TABLE group_user OWNER TO postgres;

--
-- Name: groups; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE groups (
    group_id text NOT NULL,
    realname text
);


ALTER TABLE groups OWNER TO postgres;

--
-- Name: groups_struct; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE groups_struct (
    group_id uuid NOT NULL,
    parent_id uuid,
    level integer
);


ALTER TABLE groups_struct OWNER TO postgres;

--
-- Name: record_changes; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE record_changes (
    record_uuid uuid NOT NULL,
    time_modified timestamp without time zone NOT NULL,
    table_name text NOT NULL
);


ALTER TABLE record_changes OWNER TO postgres;

--
-- Name: rule_record; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rule_record (
    uuid_record uuid NOT NULL,
    security_rule uuid NOT NULL
);


ALTER TABLE rule_record OWNER TO postgres;

--
-- Name: rules; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rules (
    security_rule uuid NOT NULL,
    rule_desc text
);


ALTER TABLE rules OWNER TO postgres;

--
-- Name: rules_data; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE rules_data (
    security_rule uuid NOT NULL,
    rule_user text,
    rule_action text,
    rule_group text,
    temp_label text,
    temp_time timestamp without time zone
);


ALTER TABLE rules_data OWNER TO postgres;

--
-- Name: tables; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE tables (
    table_name text NOT NULL,
    schema_name text NOT NULL
);


ALTER TABLE tables OWNER TO postgres;

--
-- Name: tokens; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE tokens (
    user_id text NOT NULL,
    token text NOT NULL,
    exp_date timestamp without time zone
);


ALTER TABLE tokens OWNER TO postgres;

--
-- Name: users; Type: TABLE; Schema: acs; Owner: postgres; Tablespace: 
--

CREATE TABLE users (
    id text NOT NULL,
    pass text NOT NULL,
    position_user text,
    realname text
);


ALTER TABLE users OWNER TO postgres;

SET search_path = public, pg_catalog;

--
-- Name: fruits; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE fruits (
    name name,
    cnt integer,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE fruits OWNER TO postgres;

--
-- Name: test; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE test (
    id text,
    name_p text,
    property text,
    price double precision,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE test OWNER TO postgres;

--
-- Name: ttt; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE ttt (
    val integer,
    uuid_record uuid DEFAULT uuid_generate_v4()
);


ALTER TABLE ttt OWNER TO postgres;

SET search_path = acs, pg_catalog;

--
-- Data for Name: changes_fields; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY changes_fields (db_name, record_uuid, change_uuid, table_name) FROM stdin;
\.


--
-- Data for Name: changes_history; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY changes_history (change_uuid, change_parent, change_date, change_type, change_db, hash) FROM stdin;
\.


--
-- Data for Name: group_user; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY group_user (group_id, user_id) FROM stdin;
14e9f10d-b5ea-48f5-70a2-d06e6333a37e	admin
\.


--
-- Data for Name: groups; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY groups (group_id, realname) FROM stdin;
14e9f10d-b5ea-48f5-70a2-d06e6333a37e	111
\.


--
-- Data for Name: groups_struct; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY groups_struct (group_id, parent_id, level) FROM stdin;
\.


--
-- Data for Name: record_changes; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY record_changes (record_uuid, time_modified, table_name) FROM stdin;
d99962fb-aea8-48f9-ae29-0cda9ac1eb0a	2016-04-04 16:16:07.158561	fruits
4e9c1cee-757e-4430-8c16-38e860316300	2016-04-04 16:16:23.320352	fruits
cc7af527-b70d-4036-8b75-e6b62a910d33	2016-04-04 16:16:33.400712	fruits
93b685dd-e4e3-4b87-8352-c27425e9273c	2016-04-04 16:16:56.293903	ttt
100ebb9d-0b18-4e50-ad0b-22b03e49d753	2016-04-04 16:17:01.52064	ttt
229c4053-7497-4b8a-964f-a10870139c7e	2016-04-04 16:17:04.568999	ttt
ed91a0f4-aae2-4803-841e-c828f24eb005	2016-04-04 16:17:07.832913	ttt
e354a3c5-d637-4b0c-a901-2bf6ed51e78f	2016-04-04 16:17:10.392605	ttt
38b5558a-ef8f-41e6-856d-8295542b5ddc	2016-04-04 17:32:15.70598	ttt
\.


--
-- Data for Name: rule_record; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rule_record (uuid_record, security_rule) FROM stdin;
229c4053-7497-4b8a-964f-a10870139c7e	034c4fc8-1060-47ba-4004-4c52a99176e3
b0069d8b-23d2-4585-8427-8e160850c65d	4293a022-259f-4879-9648-8e303202dd40
38b5558a-ef8f-41e6-856d-8295542b5ddc	c470aba9-5263-440f-a54a-0a3f825f01e2
\.


--
-- Data for Name: rules; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rules (security_rule, rule_desc) FROM stdin;
55109493-264a-444d-576b-55014bbf80c4	ttt1
034c4fc8-1060-47ba-4004-4c52a99176e3	tttt21213
\.


--
-- Data for Name: rules_data; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY rules_data (security_rule, rule_user, rule_action, rule_group, temp_label, temp_time) FROM stdin;
034c4fc8-1060-47ba-4004-4c52a99176e3	admin	r	\N	\N	\N
4293a022-259f-4879-9648-8e303202dd40	admin	r	\N	\N	\N
c470aba9-5263-440f-a54a-0a3f825f01e2	admin	r	\N	t	2016-04-05 17:32:15.742372
\.


--
-- Data for Name: tables; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY tables (table_name, schema_name) FROM stdin;
\.


--
-- Data for Name: tokens; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY tokens (user_id, token, exp_date) FROM stdin;
admin	fdf9fc87-b7c2-410f-a29b-9c670bd23975	2016-04-05 16:17:41.363847
admin	2c8f02da-6499-4129-86fe-ec3ea93a07a4	2016-04-05 16:19:37.235334
admin	8227676b-48a5-428c-9651-c2278ef4387c	2016-04-05 16:20:05.035224
admin	b2c50c37-4842-4a06-a17b-e37cc94a3b4b	2016-04-05 16:20:23.531251
admin	b2eef8ce-3ff7-49e0-96ac-fc34c875b421	2016-04-05 16:20:47.424261
admin	cba92fba-3b43-4e47-9dd5-6cd20173d7f8	2016-04-05 16:21:06.62737
admin	d236ec2d-cbd6-4082-81e8-c17a6f6aac51	2016-04-05 17:02:46.874174
admin	1edbfde5-1ac5-464b-a641-6a186081140d	2016-04-05 17:05:21.360151
admin	9dcb9b26-8223-463c-af68-6b8924db8858	2016-04-05 17:09:48.685564
admin	87675cb0-e4c6-4c41-9bd2-d871ecd3d2a2	2016-04-05 17:24:33.892599
admin	032ed51f-4146-4b7b-a2d2-e9ed1ce083d1	2016-04-05 17:25:40.983741
admin	0f871643-32bb-4224-8971-a73ee5134e3a	2016-04-05 17:32:13.014088
admin	6e704d9c-1015-4bdc-85b3-0018d3f195ed	2016-04-05 17:34:30.500193
dima	1bc3fd0b-64a6-4880-8392-1f68904504fb	2016-04-05 17:35:24.077212
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: acs; Owner: postgres
--

COPY users (id, pass, position_user, realname) FROM stdin;
admin	$2a$06$2Lsdtn8kXrGJfKwcQdySyeWap4n9lem9Xi6uaV7kJFpW6oCYCas0e		Администратор
dima	$2a$06$eq.E3Q/aidpx57BDVc3bquGIJXCXk6sIW8WDIUZFAJOzzr6aENxyO		Дмитрий
\.


SET search_path = public, pg_catalog;

--
-- Data for Name: fruits; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY fruits (name, cnt, uuid_record) FROM stdin;
apple	10	d99962fb-aea8-48f9-ae29-0cda9ac1eb0a
lime	4	4e9c1cee-757e-4430-8c16-38e860316300
potato	50	cc7af527-b70d-4036-8b75-e6b62a910d33
\.


--
-- Data for Name: test; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY test (id, name_p, property, price, uuid_record) FROM stdin;
\.


--
-- Data for Name: ttt; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ttt (val, uuid_record) FROM stdin;
10	93b685dd-e4e3-4b87-8352-c27425e9273c
50	100ebb9d-0b18-4e50-ad0b-22b03e49d753
100	229c4053-7497-4b8a-964f-a10870139c7e
120	ed91a0f4-aae2-4803-841e-c828f24eb005
200	e354a3c5-d637-4b0c-a901-2bf6ed51e78f
220	38b5558a-ef8f-41e6-856d-8295542b5ddc
\.


--
-- Name: t_acs_fruits; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acs_fruits AFTER INSERT OR DELETE OR UPDATE ON fruits FOR EACH ROW EXECUTE PROCEDURE acs_tg_audit();


--
-- Name: t_acs_test_protected; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acs_test_protected AFTER INSERT OR DELETE OR UPDATE ON test FOR EACH ROW EXECUTE PROCEDURE acs_tg_audit();


--
-- Name: t_acs_ttt; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER t_acs_ttt AFTER INSERT OR DELETE OR UPDATE ON ttt FOR EACH ROW EXECUTE PROCEDURE acs_tg_audit();


--
-- Name: acs_tg_event; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER acs_tg_event ON ddl_command_end
   EXECUTE PROCEDURE public.acs_tg_event();


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Name: test; Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON TABLE test FROM PUBLIC;
REVOKE ALL ON TABLE test FROM postgres;


--
-- PostgreSQL database dump complete
--

